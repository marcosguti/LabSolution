/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package facturacion;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import clases.Paciente;
import clases.Prueba;
import com.sun.org.apache.xml.internal.dtm.DTM;
import controller.PacienteController;
import dao.PacienteDAOImpl;
import static facturacion.Interfaz_principal.jMenuItemPacienteNuevo;
import hibernateUtil.BussinessException;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author ANDRES
 */
public class JTablePruebas extends javax.swing.JTable {

    public static DefaultTableModel dtm;

    public JTablePruebas() {
        initComponents();
        mostrar_tabla();

    }

    public void mostrar_tabla() {
        final PacienteController pacienteController = new PacienteController();
//        control_cliente control = new control_cliente("Documento","Tipo de documento","Nombres","Apellidos","Direccion","Ciudad","telefono");       
        String[] columnas = {"Prueba", "Valor", "Limites"};
        List<Paciente> pacientes = new ArrayList<Paciente>();

//        datostabla = control.consulta_clientes();
//     ;
        DefaultTableModel dtm = new DefaultTableModel(0, 0) {

            @Override
            public void addColumn(Object o) {
                super.addColumn(o); //To change body of generated methods, choose Tools | Templates.
            }
            boolean[] editable = new boolean[]{
                false, true, false
            };
            boolean[] editable2 = new boolean[]{
                false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (this.getValueAt(rowIndex, columnIndex).toString().contains("Area")) {
                    return editable2[columnIndex];
                }
                return editable[columnIndex];
            }
        };

        dtm.setColumnIdentifiers(columnas);
        Font f1 = new Font("Times New Roman", Font.BOLD, 12);
//        Map<String, String> map = ...
        if (StaticVarsBusiness.mapPruebas != null) {
            for (Map.Entry<String, List<Prueba>> entry : StaticVarsBusiness.mapPruebas.entrySet()) {
                Vector vector = new Vector();

                dtm.addRow(new Object[]{"Area de " + entry.getKey()});
                for (Prueba prueba : entry.getValue()) {
                    dtm.addRow(new Object[]{"     " + prueba.getNombre(), "", "(" + prueba.getLimites() + ") " + prueba.getUnidad()});
                }
                System.out.println(entry.getKey() + "/" + entry.getValue());
            }
        }
//        dtm.isCellEditable(0, 0);
        this.setModel(dtm);
        this.getColumn("Valor").setMaxWidth(100);
        this.getColumn("Valor").setMinWidth(100);
        this.getColumn("Valor").setWidth(100);
        this.getColumn("Limites").setMaxWidth(200);
        this.getColumn("Limites").setMinWidth(200);
        this.getColumn("Limites").setWidth(200);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        this.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {},
                    {},
                    {},
                    {}
                },
                new String[]{}
        ));

//        pack();
    }// </editor-fold>                        
//public boolean isCellEditable(int row, int column) {
//        return false;
//    }
}
